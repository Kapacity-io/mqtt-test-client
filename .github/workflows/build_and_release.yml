name: Build and Release
on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_ACCESS_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-upload:
    needs: release
    name: Build on Ubuntu and Upload Assets
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.20.5

      - name: Build
        run: make
        env:
          GOOS: linux
          GOARCH: amd64

      - name: Upload Release Asset for Linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_ACCESS_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./dist/mqtt-test-client-linux-amd64
          asset_name: mqtt-test-client-linux-amd64
          asset_content_type: application/octet-stream

      - name: Build for MacOS
        run: |
          mkdir -p ./dist
          make mac
        env:
          GOOS: darwin
          GOARCH: amd64

      - name: Upload Release Asset for MacOS
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_ACCESS_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./dist/mqtt-test-client-mac-amd64
          asset_name: mqtt-test-client-mac-amd64
          asset_content_type: application/octet-stream

      - name: Build for Windows
        run: |
          mkdir -p ./dist
          make windows
        env:
          GOOS: windows
          GOARCH: amd64

      - name: Upload Release Asset for Windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_ACCESS_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./dist/mqtt-test-client-windows-amd64.exe
          asset_name: mqtt-test-client-windows-amd64.exe          
          asset_content_type: application/octet-stream
